name: Build & Upload Python Package

env:
  Version: "2.0.0"
  PyPiToken: ${{ secrets.PYPI_API_TOKEN }}
  PythonVersion: 3.12

on:
  push:
    branches:
      - development
      - main

jobs:
  Install-Build:
    name: Install dependencies & Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PythonVersion }}
      - name: Install pip and requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Generate version
        id: generate_version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION="${{ env.Version }}"
          else
            VERSION="${{ env.Version }}.dev$(date +'%Y%m%d%H%M%S')"
          fi
          echo $VERSION > version.txt
      - name: Generate Build
        run: |
          python -m pip install build
          python -m build --sdist --wheel --outdir dist/
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  Tests:
    runs-on: ubuntu-latest
    needs: Install-Build
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PythonVersion }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt
      - name: Install built package
        run: |
          pip install dist/*.whl
      - name: Run tests
        run: pytest

  Publish-Prod:
    name: Publish on PyPi - Prod
    runs-on: ubuntu-latest
    needs: Tests
    if: github.ref == 'refs/heads/main'
    environment: production
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Publish distribution to PyPI
        env:
          TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ env.PyPiToken }}
        run: |
          pip install twine
          twine upload dist/* --verbose

  Publish-Dev:
    name: Publish on PyPi - Dev
    runs-on: ubuntu-latest
    needs: Tests
    if: github.ref == 'refs/heads/development'
    environment: development
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Publish distribution to PyPI
        env:
          TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ env.PyPiToken }}
        run: |
          pip install twine
          twine upload dist/* --verbose